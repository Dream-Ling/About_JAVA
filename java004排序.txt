选择排序：
   
    

            操作
趟  1       第1个位置起，找最小值，与 第1个位置元素交换
    2         2                         2 
    3         3                         3  
    ...

    i         i                         i

  //i  确定第几个位置
  for(int i=0;i<arr.length-1;i++){
      //找最小值    从 i 位置起
      int  minIndex=i;
      for(int j =i+1;j<arr.length;j++){
          if(arr[j]<arr[minIndex]){
              minIndex=j;
          }
      }
      //交换
      int temp = arr[minIndex];
      arr[minIndex]=arr[i];
      arr[i]=temp;   
  }

-------------------------------------------------------------
冒泡：

   相邻元素 两两 比较 ，前 大于  后    交换.

   for(int i=0;i<arr.length-1;i++){
       for(int j=0;j<arr.length-1-i;j++){
           if(arr[j]>arr[j+1]){
               int temp = arr[j];
               arr[j]=arr[j+1];
               arr[j+1]=temp;  
           }
       }
   }


--------------------------------------------------------------

总结：  

  a.比较深度  掌握 循环 .
     入口   出口   
       逻辑  (前一个，后一个元素) 

  b.嵌套循环 ，使用...
     什么场合 使用 什么样的循环，
     内外循环之间  变化  关系     


插入排序:
   a，判断是否插入...(arr[i]<arr[i-1])
   b. 寻找目标位置pos
        --从第一个位置起，找到第一个比 新元素(arr[i])大的。
   c.新元素arr[i] 备份  int temp=arr[i];
   d.从pos 位置  起  到  i-1 ，元素向后移动一位。
   e.新元素插入 arr[pos]=arr[i];

    //从下标位1 位置 开始  到 arr.length-1  插入 
   for(int i=1;i<arr.length;i++){
      // a，判断是否插入...(arr[i]<arr[i-1])
      if(arr[i]<arr[i-1]){
          //b. 寻找目标位置pos
        int pos =-1;     
        for(int j=0;j<i;j++){          
          if(arr[j]>arr[i]){
             pos=j;
             break;
          } 
        }
        //c.新元素arr[i] 备份  int temp=arr[i];
        int temp=arr[i];
        //d.从pos 位置  起  到  i-1 ，元素向后移动一位。
        for(int k=i-1;k>=pos;k--){
           arr[k+1]=arr[k];
        }
        //e.新元素插入 arr[pos]=temp;
        arr[pos]=temp;
      }

   }


-----------------------------------------------------------
多维数组:
int [][]arr=new int[2][4];
arr[0][0]=1;
arr[0][1]=2;
arr[0][2]=3;
arr[0][3]=4;

arr[1][0]=1;
arr[1][1]=2;
arr[1][2]=3;
arr[1][3]=4;

int [][][]arr=new int[5][2][4];

arr[3][1][2]=10;

-------------因素-----结果----------

  多重因素 --->结果


杨辉三角
     

(a+b)N次幂
1

1   1

1   2   1

1   3   3    1

1   4   6    4    1


  int[][]arr=new int[10][10];
  System.out.println("1");
  for(int i=0;i<10;i++){
     //第一列
     arr[i][0]=1;
     System.out.print(arr[i][0]+"\t");
     for(int j=1;j<i;j++){
        arr[i][j]=arr[i-1][j-1]+arr[i-1][j];
        System.out.print(arr[i][j]+"\t");
     }
     //最后列
     arr[i][i]=1;
     System.out.println(arr[i][i]);
  }













